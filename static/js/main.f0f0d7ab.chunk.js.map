{"version":3,"sources":["reducer/GameReducer.js","cover.webp","components/GameStart.js","components/GameInProgress.js","components/GameCompleted.js","App.js","reportWebVitals.js","index.js"],"names":["GameStatus","GameActions","InitialGameState","status","GameReducer","state","action","type","stageCount","gameStartTime","Date","now","timeTaken","Error","styles","coverImage","height","borderRadius","GameStart","onStartGameClick","src","style","alt","className","onClick","SIDE_THRESHOLD_PERCENT","getRandomInt","min","max","Math","ceil","floor","random","getWindowDimensions","window","width","innerWidth","innerHeight","root","dot","backgroundColor","GameInProgress","onDotClick","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","x","y","getDotCoordinates","position","top","left","GameCompleted","restartGameClick","Game","gameState","App","useReducer","dispatch","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0f0d7ab.chunk.js","sourcesContent":["export const GameStatus = {\n    READY: \"READY\",\n    IN_PROGRESS: \"IN_PROGRESS\",\n    COMPLETED: \"COMPLETED\"\n}\n\nexport const GameActions = {\n    INIT: \"INIT\",\n    START: \"START\",\n    ON_DOT_CLICK: \"ON_DOT_CLICK\",\n}\n\nexport const InitialGameState = {\n    status: GameStatus.READY\n};\n\nconst MAX_STAGE = 10\n\nexport default function GameReducer(state, action) {\n  switch (action.type) {\n    case GameActions.INIT:\n      return {\n          status: GameStatus.READY\n      };\n    case GameActions.START:\n      return {\n        status: GameStatus.IN_PROGRESS,\n        stageCount: 1,\n        gameStartTime: Date.now()\n    };\n    case GameActions.ON_DOT_CLICK:\n        const { stageCount = 0, gameStartTime } = state || {}\n        if (stageCount >= MAX_STAGE) {\n            const timeTaken = Date.now() - gameStartTime\n            return {\n                status: GameStatus.COMPLETED,\n                timeTaken\n            };\n        }\n      return {\n        ...state,\n        status: GameStatus.IN_PROGRESS,\n        stageCount: stageCount + 1\n    };\n    default:\n      throw new Error();\n  }\n}\n","export default __webpack_public_path__ + \"static/media/cover.96ee64d4.webp\";","import '../App.css';\nimport coverImage from '../cover.webp';\n\nfunction GameStart({onStartGameClick}) {\n  return (\n    <>\n        <img src={coverImage} style={styles.coverImage} alt=\"cover\" />\n        <p />\n        <div className=\"App-button\" onClick={onStartGameClick}>START</div>\n    </>\n  );\n}\n\nconst styles = {\n  coverImage: {\n    height: \"50vh\",\n    borderRadius: \"10px\"\n  }\n}\n\nexport default GameStart;\n","import { useEffect, useState } from 'react';\nimport '../App.css';\n\nconst SIDE_THRESHOLD_PERCENT = 0.2\n\nfunction GameInProgress({onDotClick}) {\n    const { height, width } = useWindowDimensions();\n    const {x, y} = getDotCoordinates(height, width)\n    return (\n        <div style={styles.root}>\n            <div style={{...styles.dot, position: \"absolute\", top: y, left: x}} onClick={onDotClick}/>\n        </div>\n    );\n}\n\nfunction getDotCoordinates(height, width) {\n    const x = getRandomInt(SIDE_THRESHOLD_PERCENT * width, (1 - SIDE_THRESHOLD_PERCENT) * width)\n    const y = getRandomInt(SIDE_THRESHOLD_PERCENT * height, (1 - SIDE_THRESHOLD_PERCENT) * height)\n    return {x, y}\n}\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\n\nfunction useWindowDimensions() {\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n    useEffect(() => {\n        function handleResize() {\n        setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowDimensions;\n}\n\nconst styles = {\n    root: {\n        width: \"100vw\",\n        height: \"100vh\"\n    },\n    dot: {\n        width: \"10px\",\n        height: \"10px\",\n        borderRadius: \"5px\",\n        backgroundColor: \"#FFCE45\"\n    }\n}\n\nexport default GameInProgress;\n","import '../App.css';\n\nfunction GameCompleted({restartGameClick, timeTaken}) {\n  return (\n    <>\n      <p>Time taken - {timeTaken / 1000} secs</p>\n      <div className=\"App-button\" onClick={restartGameClick}>Restart</div>\n    </>\n  );\n}\n\nexport default GameCompleted;\n","import './App.css';\nimport { useReducer } from 'react';\nimport GameReducer, { GameActions, GameStatus, InitialGameState } from './reducer/GameReducer';\nimport GameStart from './components/GameStart';\nimport GameInProgress from './components/GameInProgress';\nimport GameCompleted from './components/GameCompleted';\n\nfunction App() {\n  const [gameState, dispatch] = useReducer(GameReducer, InitialGameState)\n  const onStartGameClick = () => dispatch({ type: GameActions.START})\n  const onDotClick = () => dispatch({type: GameActions.ON_DOT_CLICK})\n  return (\n    <div className=\"Page\">\n      <Game \n        gameState={gameState}\n        onStartGameClick={onStartGameClick}\n        onDotClick={onDotClick}\n      />\n    </div>\n  );\n}\n\nfunction Game({gameState, onStartGameClick, onDotClick}) {\n  const {status, timeTaken} = gameState || {}\n  if (status === GameStatus.READY) {\n    return <GameStart onStartGameClick={onStartGameClick} />\n  } else if (status === GameStatus.IN_PROGRESS) {\n    return <GameInProgress onDotClick={onDotClick} />\n  } else if (status === GameStatus.COMPLETED) {\n    return <GameCompleted restartGameClick={onStartGameClick} timeTaken={timeTaken} />\n  }\n  return null\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}